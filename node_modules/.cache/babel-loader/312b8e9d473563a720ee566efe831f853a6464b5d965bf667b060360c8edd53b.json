{"ast":null,"code":"// Import list of proveniences data\nimport { provenience } from '../../../Data/Provenience.js';\nfunction groupProvenienceByFirstLetter(provenience) {\n  const groups = {};\n  provenience.forEach(item => {\n    const firstLetter = item.charAt(0).toUpperCase(); // Convert the first letter to uppercase\n\n    if (!groups[firstLetter]) {\n      groups[firstLetter] = [];\n    }\n    groups[firstLetter].push(item);\n  });\n\n  // Sort groups alphabetically\n  const sortedGroups = {};\n  Object.keys(groups).sort().forEach(key => {\n    sortedGroups[key] = groups[key];\n  });\n  return sortedGroups;\n}\n\n// Use the function to group provenience by the first letter\nconst groupedProvenience = groupProvenienceByFirstLetter(provenience);\n\n// Convert object to an array of objects for rendering\nconst items = Object.entries(groupedProvenience).map(([letter, values]) => ({\n  letter,\n  values: values.map(value => ({\n    name: value,\n    url: `testSearch.asp?searchBy=Provenience&txtValue=${value}&exact=true`\n  }))\n}));\n\n// Use the items array for rendering in the BasicSearch component\nexport default items;","map":{"version":3,"names":["provenience","groupProvenienceByFirstLetter","groups","forEach","item","firstLetter","charAt","toUpperCase","push","sortedGroups","Object","keys","sort","key","groupedProvenience","items","entries","map","letter","values","value","name","url"],"sources":["/Users/datnq2001/Documents/Trendall-website/src/Components/BasicResearch/Alphabet Page/ProvenienceGroups.js"],"sourcesContent":["// Import list of proveniences data\nimport { provenience } from '../../../Data/Provenience.js';\n\nfunction groupProvenienceByFirstLetter(provenience) {\n  const groups = {};\n  \n  provenience.forEach(item => {\n    const firstLetter = item.charAt(0).toUpperCase(); // Convert the first letter to uppercase\n\n    if (!groups[firstLetter]) {\n      groups[firstLetter] = [];\n    }\n    \n    groups[firstLetter].push(item);\n  });\n\n  // Sort groups alphabetically\n  const sortedGroups = {};\n  Object.keys(groups).sort().forEach(key => {\n    sortedGroups[key] = groups[key];\n  });\n\n  return sortedGroups;\n}\n\n// Use the function to group provenience by the first letter\nconst groupedProvenience = groupProvenienceByFirstLetter(provenience);\n\n// Convert object to an array of objects for rendering\nconst items = Object.entries(groupedProvenience).map(([letter, values]) => ({\n  letter,\n  values: values.map(value => ({\n    name: value,\n    url: `testSearch.asp?searchBy=Provenience&txtValue=${value}&exact=true`\n  }))\n}));\n\n// Use the items array for rendering in the BasicSearch component\nexport default items;\n"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAQ,8BAA8B;AAE1D,SAASC,6BAA6BA,CAACD,WAAW,EAAE;EAClD,MAAME,MAAM,GAAG,CAAC,CAAC;EAEjBF,WAAW,CAACG,OAAO,CAACC,IAAI,IAAI;IAC1B,MAAMC,WAAW,GAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC,CAAC;;IAElD,IAAI,CAACL,MAAM,CAACG,WAAW,CAAC,EAAE;MACxBH,MAAM,CAACG,WAAW,CAAC,GAAG,EAAE;IAC1B;IAEAH,MAAM,CAACG,WAAW,CAAC,CAACG,IAAI,CAACJ,IAAI,CAAC;EAChC,CAAC,CAAC;;EAEF;EACA,MAAMK,YAAY,GAAG,CAAC,CAAC;EACvBC,MAAM,CAACC,IAAI,CAACT,MAAM,CAAC,CAACU,IAAI,CAAC,CAAC,CAACT,OAAO,CAACU,GAAG,IAAI;IACxCJ,YAAY,CAACI,GAAG,CAAC,GAAGX,MAAM,CAACW,GAAG,CAAC;EACjC,CAAC,CAAC;EAEF,OAAOJ,YAAY;AACrB;;AAEA;AACA,MAAMK,kBAAkB,GAAGb,6BAA6B,CAACD,WAAW,CAAC;;AAErE;AACA,MAAMe,KAAK,GAAGL,MAAM,CAACM,OAAO,CAACF,kBAAkB,CAAC,CAACG,GAAG,CAAC,CAAC,CAACC,MAAM,EAAEC,MAAM,CAAC,MAAM;EAC1ED,MAAM;EACNC,MAAM,EAAEA,MAAM,CAACF,GAAG,CAACG,KAAK,KAAK;IAC3BC,IAAI,EAAED,KAAK;IACXE,GAAG,EAAG,gDAA+CF,KAAM;EAC7D,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC;;AAEH;AACA,eAAeL,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}